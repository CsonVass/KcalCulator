version: '3.4'

services:

  traefik:
    image: "traefik:v2.6"
    container_name: "traefik"
    command:
      - "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--providers.docker.network=web"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    labels:
      - "traefik.http.routers.api.rule=Host(`traefik.localhost`)"
      - "traefik.http.routers.api.service=api@internal"
    networks:
      - web



  nutrientservice.api:
    image: ${DOCKER_REGISTRY-}nutrientserviceapi
    build:
      context: .
      dockerfile: NutrientService\NutrientService.API\Dockerfile
    ports:
      - 81:80
#      - 60087:443
    networks:
        - backend
        - web
    depends_on:
      - mongodb_container
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.nutrients.rule=Host(`localhost`) && PathPrefix(`/api/nutrient`)"
      - "traefik.http.routers.nutrients.entrypoints=web"


  diaryservice.api:
    image: ${DOCKER_REGISTRY-}diaryserviceapi
    build:
      context: .
      dockerfile: DiaryService\DiaryService.API\Dockerfile
    ports:
      - 82:80
#      - 60088:80
#      - 60088:443
    networks:
        - backend
        - web
    depends_on:
      -  mongodb_container
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.diary.rule=Host(`localhost`) && PathPrefix(`/api/diaries`)"
      - "traefik.http.routers.diary.entrypoints=web"



  mongodb_container:
    image: mongo:5.0
    container_name: mongodb
    ports:
      - 27017:27017
    volumes:
       - shared_database:/usr/local/mongo
    networks:
        - backend
    #environment:
    #    - MONGO_INITDB_ROOT_USERNAME=root
    #    - MONGO_INITDB_ROOT_PASSWORD=root

  rabbitmq-container:
    image: rabbitmq:3-management
    container_name: rabbitmq
    hostname: rabbitmq
    ports:
    - 5672:5672
    - 15672:15672
    networks:
      - backend
      - web
    environment:
      - RABBITMQ_DEFAULT_USER=kcal
      - RABBITMQ_DEFAULT_PASS=kcal

  email-provider:
    image: message-producer
    build:
      context: .
      dockerfile: spring-rabbitmq-producer\Dockerfile
    ports:
#    - 9000:9000
    - 83:9000
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
    networks:
      - backend
      - web
    depends_on:
      - rabbitmq-container
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.email.rule=Host(`localhost`) && PathPrefix(`/publish`)"
      - "traefik.http.routers.email.entrypoints=web"

  email-consumer:
    image: email-sender
    build:
      context: .
      dockerfile: spring-email\Dockerfile
    ports:
    - 9001:9001
    environment:
      - SPRING_RABBITMQ_HOST=rabbitmq
    depends_on:
      - rabbitmq-container
    networks:
      - backend
      - web

  postgres:
    image: postgres:13.2
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    networks:
      - web

  keycloak:
    depends_on:
      - postgres
    container_name: local_keycloak
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: Pa55w0rd
    image: jboss/keycloak:13.0.0
    ports:
      - 8090:8080
    restart: unless-stopped
    networks:
      - web



volumes:
    shared_database:
    #dynamic.yaml:
    docker.sock:
    #letsencrypt:


networks:
  backend:
    external: false
    name: backend
  web:
    external: false
    name: web

  

